#!/usr/bin/env python3
"""
üöÄ MT5 Real Trading Bot
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á - ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á!
"""

import MetaTrader5 as mt5
import pandas as pd
import time
from datetime import datetime
from config import *
from strategy import ema_strategy
from risk import check_daily_limits, calculate_position_size
from utils.logger import get_logger

log = get_logger("real_trading")

def initialize_mt5():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
    if not mt5.initialize():
        log.error("MT5 initialization failed")
        return False
    
    # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    authorized = mt5.login(MT5_LOGIN, password=MT5_PASSWORD, server=MT5_SERVER)
    if not authorized:
        log.error(f"Failed to connect to {MT5_SERVER}")
        mt5.shutdown()
        return False
    
    account_info = mt5.account_info()
    if account_info is None:
        log.error("Failed to get account info")
        return False
    
    log.info(f"Connected to {account_info.name}, Balance: {account_info.balance}")
    return True

def place_order(symbol, order_type, lot, sl, tp):
    """‡∏ß‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Risk Management ‡∏Å‡πà‡∏≠‡∏ô
    if not check_daily_limits():
        log.warning("Daily limits reached - No new trades")
        return False
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î Position
    position_size = calculate_position_size(symbol, sl)
    
    point = mt5.symbol_info(symbol).point
    price = mt5.symbol_info_tick(symbol).ask if order_type == mt5.ORDER_TYPE_BUY else mt5.symbol_info_tick(symbol).bid
    
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": position_size,
        "type": order_type,
        "price": price,
        "sl": sl,
        "tp": tp,
        "deviation": MAX_SLIPPAGE,
        "magic": MAGIC,
        "comment": "EMA Strategy Bot",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }
    
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        log.error(f"Order failed: {result.comment}")
        return False
    
    log.info(f"Order successful: {result.order}")
    return True

def main():
    """Main trading loop"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üöÄ MT5 REAL TRADING BOT                       ‚ïë
‚ïë                   ‚ö†Ô∏è  LIVE ACCOUNT ‚ö†Ô∏è                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë        üî¥ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÑ‡∏î‡πâ         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    confirm = input("\n‚ö†Ô∏è  ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á? (‡∏û‡∏¥‡∏°‡∏û‡πå 'YES' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô): ")
    if confirm != "YES":
        print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î")
        return
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
    if not initialize_mt5():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
        return
    
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏£‡∏î...")
    
    try:
        while True:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            rates = mt5.copy_rates_from_pos(SYMBOL, getattr(mt5, f"TIMEFRAME_{TIMEFRAME}"), 0, 200)
            if rates is None:
                log.error("Failed to get market data")
                time.sleep(60)
                continue
            
            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Strategy
            signal = ema_strategy(df, EMA_SHORT, EMA_LONG)
            
            if signal != "HOLD":
                log.info(f"Signal: {signal}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ position ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                positions = mt5.positions_get(symbol=SYMBOL)
                if len(positions) >= MAX_OPEN_TRADES:
                    log.info("Max positions reached")
                else:
                    # ‡∏ß‡∏≤‡∏á Order
                    if signal == "BUY":
                        price = mt5.symbol_info_tick(SYMBOL).ask
                        sl = price - (SL_PIPS * mt5.symbol_info(SYMBOL).point * 10)
                        tp = price + (TP_PIPS * mt5.symbol_info(SYMBOL).point * 10)
                        place_order(SYMBOL, mt5.ORDER_TYPE_BUY, LOT, sl, tp)
                    
                    elif signal == "SELL":
                        price = mt5.symbol_info_tick(SYMBOL).bid
                        sl = price + (SL_PIPS * mt5.symbol_info(SYMBOL).point * 10)
                        tp = price - (TP_PIPS * mt5.symbol_info(SYMBOL).point * 10)
                        place_order(SYMBOL, mt5.ORDER_TYPE_SELL, LOT, sl, tp)
            
            time.sleep(60)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
            
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î...")
    finally:
        mt5.shutdown()

if __name__ == "__main__":
    main()