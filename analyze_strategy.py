#!/usr/bin/env python3
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Strategy ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMA
"""
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from config import SYMBOL, EMA_SHORT, EMA_LONG
from strategy import ema_strategy

def get_data_and_analyze():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå strategy"""
    print(f"üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Strategy - {SYMBOL}")
    print(f"üìä EMA Short: {EMA_SHORT}, EMA Long: {EMA_LONG}")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if SYMBOL == "XAUUSD":
        yahoo_symbol = "GC=F"
    else:
        yahoo_symbol = f"{SYMBOL}=X"
    
    end_date = datetime.now()
    start_date = end_date - timedelta(days=120)
    
    data = yf.download(yahoo_symbol, start=start_date, end=end_date, interval="1d")
    
    if data.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.DataFrame()
    df['time'] = data.index
    df['close'] = data['Close'].values
    df = df.reset_index(drop=True)
    
    print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(df)} ‡∏ß‡∏±‡∏ô")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
    df['ema_short'] = df['close'].ewm(span=EMA_SHORT).mean()
    df['ema_long'] = df['close'].ewm(span=EMA_LONG).mean()
    
    # ‡∏´‡∏≤ signals ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 10 ‡∏ß‡∏±‡∏ô
    print("\nüìà Signals ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏ß‡∏±‡∏ô:")
    print("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà\t\t‡∏£‡∏≤‡∏Ñ‡∏≤\tEMA20\tEMA50\tSignal")
    print("-" * 70)
    
    signals_found = 0
    
    for i in range(max(len(df) - 10, EMA_LONG), len(df)):
        if i < EMA_LONG:
            continue
            
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà i
        current_data = df.iloc[:i+1].copy()
        signal = ema_strategy(current_data)
        
        if signal != "HOLD":
            signals_found += 1
        
        date_str = str(df.iloc[i]['time'])[:10]
        price = df.iloc[i]['close']
        ema_s = df.iloc[i]['ema_short']
        ema_l = df.iloc[i]['ema_long']
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö signal
        signal_emoji = "üî¥" if signal == "SELL" else "üü¢" if signal == "BUY" else "‚ö™"
        
        print(f"{date_str}\t${price:.2f}\t${ema_s:.2f}\t${ema_l:.2f}\t{signal_emoji} {signal}")
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö {signals_found} signals ‡πÉ‡∏ô 10 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_signal = ema_strategy(df)
    last_price = df.iloc[-1]['close']
    last_ema_short = df.iloc[-1]['ema_short']
    last_ema_long = df.iloc[-1]['ema_long']
    
    print(f"""
üéØ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
   ‡∏£‡∏≤‡∏Ñ‡∏≤: ${last_price:.2f}
   EMA {EMA_SHORT}: ${last_ema_short:.2f}
   EMA {EMA_LONG}: ${last_ema_long:.2f}
   Trend: {'Bullish' if last_ema_short > last_ema_long else 'Bearish'}
   Signal: {current_signal}
    """)
    
    # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ crossover ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    print("\nüîÑ ‡∏´‡∏≤ EMA Crossover ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î...")
    
    for i in range(len(df) - 1, EMA_LONG, -1):
        prev_short = df.iloc[i-1]['ema_short']
        prev_long = df.iloc[i-1]['ema_long']
        curr_short = df.iloc[i]['ema_short']
        curr_long = df.iloc[i]['ema_long']
        
        # Golden Cross (bullish)
        if prev_short <= prev_long and curr_short > curr_long:
            date_str = str(df.iloc[i]['time'])[:10]
            print(f"üü¢ Golden Cross (BUY): {date_str} - {len(df) - i} ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            break
        
        # Death Cross (bearish)
        elif prev_short >= prev_long and curr_short < curr_long:
            date_str = str(df.iloc[i]['time'])[:10]
            print(f"üî¥ Death Cross (SELL): {date_str} - {len(df) - i} ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô")
            break
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö EMA Crossover ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ")

if __name__ == "__main__":
    get_data_and_analyze()