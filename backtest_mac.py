#!/usr/bin/env python3
"""
Backtest Engine ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö macOS (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Yahoo Finance)
"""
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import numpy as np
from config import SYMBOL, LOT, SL_PIPS, TP_PIPS, BACKTEST_DAYS, EMA_SHORT, EMA_LONG
from strategy import ema_strategy
from utils.logger import get_logger

log = get_logger("backtest")

class BacktestEngine:
    def __init__(self, initial_balance=10000):
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.equity = initial_balance
        self.trades = []
        self.daily_balance = []
        
    def get_historical_data(self, symbol: str, days: int):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        try:
            # ‡πÅ‡∏õ‡∏•‡∏á symbol
            if symbol == "XAUUSD":
                yahoo_symbol = "GC=F"
            elif symbol == "EURUSD":
                yahoo_symbol = "EURUSD=X"
            else:
                yahoo_symbol = f"{symbol}=X"
            
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days + 30)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA
            
            data = yf.download(yahoo_symbol, start=start_date, end=end_date, interval="1d")
            
            if data.empty:
                return None
            
            df = pd.DataFrame()
            df['time'] = data.index
            df['open'] = data['Open'].values
            df['high'] = data['High'].values
            df['low'] = data['Low'].values
            df['close'] = data['Close'].values
            df['volume'] = data.get('Volume', [0] * len(data)).values
            
            return df.dropna().reset_index(drop=True)
            
        except Exception as e:
            log.error(f"Error fetching data: {e}")
            return None
    
    def calculate_position_size(self, price: float):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á position (‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å lot ‡πÄ‡∏õ‡πá‡∏ô value)"""
        if SYMBOL == "XAUUSD":
            # ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ 1 lot = 100 oz
            return LOT * 100 * price
        else:
            # Forex 1 lot = 100,000 units
            return LOT * 100000
    
    def simulate_trade(self, entry_price: float, action: str, exit_price: float = None, exit_reason: str = "Market"):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
        position_size = self.calculate_position_size(entry_price)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SL ‡πÅ‡∏•‡∏∞ TP
        if action == "BUY":
            sl_price = entry_price - (SL_PIPS * 0.1)  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥ 1 pip = 0.1
            tp_price = entry_price + (TP_PIPS * 0.1)
            multiplier = 1
        else:  # SELL
            sl_price = entry_price + (SL_PIPS * 0.1)
            tp_price = entry_price - (TP_PIPS * 0.1)
            multiplier = -1
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ exit_price ‡πÉ‡∏ä‡πâ TP
        if exit_price is None:
            exit_price = tp_price
            exit_reason = "TP"
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L
        if SYMBOL == "XAUUSD":
            # ‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥: P&L = (Exit - Entry) * Volume * Multiplier
            pnl = (exit_price - entry_price) * (LOT * 100) * multiplier
        else:
            # Forex: P&L = (Exit - Entry) * Position Size * Multiplier / Entry Price
            pnl = (exit_price - entry_price) * position_size * multiplier / entry_price
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï balance
        self.balance += pnl
        self.equity = self.balance
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å trade
        trade = {
            'time': datetime.now(),
            'symbol': SYMBOL,
            'action': action,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'exit_reason': exit_reason,
            'lot': LOT,
            'pnl': pnl,
            'balance': self.balance
        }
        
        self.trades.append(trade)
        return trade
    
    def run_backtest(self, df: pd.DataFrame):
        """‡∏£‡∏±‡∏ô backtest"""
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Backtest - {SYMBOL}")
        print(f"üí∞ Balance ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${self.initial_balance:,.2f}")
        print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(df)} ‡∏ß‡∏±‡∏ô")
        print("=" * 50)
        
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö EMA
        if len(df) < EMA_LONG + 10:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ {EMA_LONG + 10} ‡∏ß‡∏±‡∏ô)")
            return
        
        open_position = None
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
        for i in range(EMA_LONG, len(df)):
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_data = df.iloc[:i+1].copy()
            current_price = current_data.iloc[-1]['close']
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å balance ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
            self.daily_balance.append({
                'date': current_data.iloc[-1]['time'],
                'balance': self.balance
            })
            
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ position ‡πÄ‡∏õ‡∏¥‡∏î ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SL/TP
            if open_position:
                action = open_position['action']
                entry_price = open_position['entry_price']
                
                hit_sl = False
                hit_tp = False
                
                if action == "BUY":
                    sl_price = entry_price - (SL_PIPS * 0.1)
                    tp_price = entry_price + (TP_PIPS * 0.1)
                    
                    if current_price <= sl_price:
                        hit_sl = True
                        exit_price = sl_price
                    elif current_price >= tp_price:
                        hit_tp = True
                        exit_price = tp_price
                        
                else:  # SELL
                    sl_price = entry_price + (SL_PIPS * 0.1)
                    tp_price = entry_price - (TP_PIPS * 0.1)
                    
                    if current_price >= sl_price:
                        hit_sl = True
                        exit_price = sl_price
                    elif current_price <= tp_price:
                        hit_tp = True
                        exit_price = tp_price
                
                # ‡∏õ‡∏¥‡∏î position ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô SL/TP
                if hit_sl or hit_tp:
                    exit_reason = "SL" if hit_sl else "TP"
                    trade = self.simulate_trade(entry_price, action, exit_price, exit_reason)
                    
                    pnl_str = f"+${trade['pnl']:.2f}" if trade['pnl'] > 0 else f"${trade['pnl']:.2f}"
                    print(f"üìà {action} {exit_reason} | Entry: ${entry_price:.2f} | Exit: ${exit_price:.2f} | P&L: {pnl_str}")
                    
                    open_position = None
                    continue
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ position ‡∏´‡∏≤ signal ‡πÉ‡∏´‡∏°‡πà
            if not open_position:
                signal = ema_strategy(current_data)
                
                if signal in ["BUY", "SELL"]:
                    open_position = {
                        'action': signal,
                        'entry_price': current_price,
                        'entry_time': current_data.iloc[-1]['time']
                    }
                    print(f"üîî New {signal} Signal | Price: ${current_price:.2f}")
        
        # ‡∏õ‡∏¥‡∏î position ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if open_position:
            final_price = df.iloc[-1]['close']
            trade = self.simulate_trade(
                open_position['entry_price'], 
                open_position['action'], 
                final_price, 
                "Market Close"
            )
            pnl_str = f"+${trade['pnl']:.2f}" if trade['pnl'] > 0 else f"${trade['pnl']:.2f}"
            print(f"üìà {open_position['action']} Market Close | P&L: {pnl_str}")
    
    def show_results(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if not self.trades:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Trade")
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        total_trades = len(self.trades)
        winning_trades = sum(1 for t in self.trades if t['pnl'] > 0)
        losing_trades = total_trades - winning_trades
        win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
        
        total_pnl = sum(t['pnl'] for t in self.trades)
        avg_win = np.mean([t['pnl'] for t in self.trades if t['pnl'] > 0]) if winning_trades > 0 else 0
        avg_loss = np.mean([t['pnl'] for t in self.trades if t['pnl'] < 0]) if losing_trades > 0 else 0
        
        max_win = max([t['pnl'] for t in self.trades]) if self.trades else 0
        max_loss = min([t['pnl'] for t in self.trades]) if self.trades else 0
        
        roi = ((self.balance - self.initial_balance) / self.initial_balance) * 100
        
        print(f"""
{'='*60}
üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Backtest
{'='*60}
üí∞ Balance ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:     ${self.initial_balance:,.2f}
üí∞ Balance ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:      ${self.balance:,.2f}
üìà Total P&L:           ${total_pnl:+,.2f}
üìä ROI:                 {roi:+.2f}%

üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Trades:        {total_trades}
‚úÖ Win Trades:          {winning_trades} ({win_rate:.1f}%)
‚ùå Loss Trades:         {losing_trades} ({100-win_rate:.1f}%)

üíπ Average Win:         ${avg_win:.2f}
üìâ Average Loss:        ${avg_loss:.2f}
üèÜ Max Win:             ${max_win:.2f}
üíî Max Loss:            ${max_loss:.2f}

‚öñÔ∏è Risk/Reward Ratio:   {abs(avg_win/avg_loss):.2f} (‡∏ñ‡πâ‡∏≤ avg_loss ‚â† 0)
{'='*60}
        """)
        
        # ‡πÅ‡∏™‡∏î‡∏á trades ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        print("üîÑ Trades ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        for trade in self.trades[-5:]:
            pnl_str = f"+${trade['pnl']:.2f}" if trade['pnl'] > 0 else f"${trade['pnl']:.2f}"
            print(f"   {trade['action']} | Entry: ${trade['entry_price']:.2f} | Exit: ${trade['exit_price']:.2f} | {trade['exit_reason']} | P&L: {pnl_str}")

def run_backtest():
    """‡∏£‡∏±‡∏ô backtest ‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Backtesting...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á backtest engine
    bt = BacktestEngine(initial_balance=10000)
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    print("üìà ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á...")
    df = bt.get_historical_data(SYMBOL, BACKTEST_DAYS)
    
    if df is None or df.empty:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡∏ß‡∏±‡∏ô")
    
    # ‡∏£‡∏±‡∏ô backtest
    bt.run_backtest(df)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    bt.show_results()

if __name__ == "__main__":
    run_backtest()