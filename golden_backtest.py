#!/usr/bin/env python3
"""
üèÜ Golden Trend Backtest Engine
‡∏ó‡∏î‡∏™‡∏≠‡∏ö Golden Trend System ‡πÅ‡∏ö‡∏ö comprehensive
"""

import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import numpy as np
from config import SYMBOL, RISK_PERCENT, BACKTEST_DAYS
from strategy import golden_trend_system
from utils.logger import get_logger

log = get_logger("golden_backtest")

class GoldenTrendBacktest:
    def __init__(self, initial_balance=10000):
        self.initial_balance = initial_balance
        self.balance = initial_balance
        self.equity = initial_balance
        self.trades = []
        self.daily_balance = []
        self.consecutive_losses = 0
        self.max_consecutive_losses = 0
        
    def get_historical_data(self, symbol: str, days: int):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
        try:
            if symbol == "XAUUSD":
                yahoo_symbol = "GC=F"
            elif symbol == "EURUSD":
                yahoo_symbol = "EURUSD=X"
            else:
                yahoo_symbol = f"{symbol}=X"
            
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days + 50)  # Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö indicators
            
            data = yf.download(yahoo_symbol, start=start_date, end=end_date, interval="1h")
            
            if data.empty:
                return None
            
            df = pd.DataFrame()
            df['time'] = data.index
            df['open'] = data['Open'].values
            df['high'] = data['High'].values
            df['low'] = data['Low'].values
            df['close'] = data['Close'].values
            df['volume'] = data.get('Volume', [0] * len(data)).values
            
            return df.dropna().reset_index(drop=True)
            
        except Exception as e:
            log.error(f"Error getting data: {e}")
            return None

    def execute_trade(self, action, entry_price, sl_price, tp_price, lot_size, entry_time):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á Slippage ‡πÅ‡∏•‡∏∞ Commission"""
        multiplier = 1 if action == "BUY" else -1

        # ‡∏Ñ‡πà‡∏≤ Spread, Commission ‡πÅ‡∏•‡∏∞ Slippage
        spread = 0.0  # Zero spread account
        commission_per_lot = 7.0  # $7 per lot per side
        commission = commission_per_lot * lot_size * 2  # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î
        slippage = np.random.uniform(-0.5, 0.5)  # Slippage ¬±0.5

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà TP
        if action == "BUY":
            exit_price = tp_price - spread + slippage  # ‡∏´‡∏±‡∏Å Spread ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Slippage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BUY
        else:
            exit_price = tp_price + spread + slippage  # ‡∏ö‡∏ß‡∏Å Spread ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Slippage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SELL

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì P&L ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö XAUUSD
        pnl = ((exit_price - entry_price) * multiplier * lot_size * 100) - commission

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï balance
        old_balance = self.balance
        self.balance += pnl

        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ consecutive losses
        if pnl > 0:
            self.consecutive_losses = 0
        else:
            self.consecutive_losses += 1
            self.max_consecutive_losses = max(self.max_consecutive_losses, self.consecutive_losses)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å trade
        trade = {
            'time': entry_time,
            'action': action,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'sl_price': sl_price,
            'tp_price': tp_price,
            'lot_size': lot_size,
            'pnl': pnl,
            'balance': self.balance,
            'result': 'WIN' if pnl > 0 else 'LOSS',
            'commission': commission,
            'slippage': slippage
        }

        self.trades.append(trade)

        return trade

    def run_backtest(self):
        """‡∏£‡∏±‡∏ô backtest"""
        print(f"""
üèÜ Golden Trend System Backtest
================================
üìä Symbol: {SYMBOL}
üìÖ Period: {BACKTEST_DAYS} days
üí∞ Initial Balance: ${self.initial_balance:,.2f}
üõ°Ô∏è Risk per Trade: {RISK_PERCENT}%
        """)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
        df = self.get_historical_data(SYMBOL, BACKTEST_DAYS)
        
        if df is None or len(df) < 200:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
            return
        
        print(f"‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(df)} candles ({df['time'].iloc[0].strftime('%Y-%m-%d')} ‡∏ñ‡∏∂‡∏á {df['time'].iloc[-1].strftime('%Y-%m-%d')})")
        
        # Backtest loop
        print("\nüîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...")
        signals = 0
        
        for i in range(200, len(df)):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ indicator ‡∏Ñ‡∏£‡∏ö
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö consecutive losses limit
            if self.consecutive_losses >= 3:
                continue  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡∏¥‡∏î
                
            current_data = df.iloc[:i+1].copy()
            current_price = current_data.iloc[-1]['close']
            current_time = current_data.iloc[-1]['time']
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Golden Trend System
            result = golden_trend_system(current_data, risk_pct=RISK_PERCENT, account_balance=self.balance)
            
            if result['signal'] in ['BUY', 'SELL']:
                signals += 1
                
                # Execute trade
                trade = self.execute_trade(
                    action=result['signal'],
                    entry_price=result['entry_price'],
                    sl_price=result['sl_price'],
                    tp_price=result['tp_price'],
                    lot_size=result['lot_size'],
                    entry_time=current_time
                )
                
                print(f"üéØ {trade['action']} @ ${trade['entry_price']:.2f} | P&L: ${trade['pnl']:.2f} | Balance: ${trade['balance']:.2f}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.show_results()

    def show_results(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if not self.trades:
            print("\n‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Trade ‡πÉ‡∏ô Golden Trend System")
            print("üí° ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤:")
            print("   - ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (ADX > 25, EMA Stack)")
            print("   - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ London/NY")
            print("   - ‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ trend ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô")
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t['pnl'] > 0])
        losing_trades = total_trades - winning_trades
        win_rate = (winning_trades / total_trades) * 100
        
        total_profit = sum([t['pnl'] for t in self.trades if t['pnl'] > 0])
        total_loss = sum([t['pnl'] for t in self.trades if t['pnl'] < 0])
        net_profit = self.balance - self.initial_balance
        
        profit_factor = abs(total_profit / total_loss) if total_loss != 0 else float('inf')
        
        # Max Drawdown
        peak = self.initial_balance
        max_drawdown = 0
        for trade in self.trades:
            if trade['balance'] > peak:
                peak = trade['balance']
            drawdown = (peak - trade['balance']) / peak * 100
            max_drawdown = max(max_drawdown, drawdown)
        
        print(f"""
üèÜ Golden Trend System Results
==============================
üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î:
   ‚Ä¢ Total Trades: {total_trades}
   ‚Ä¢ Winning: {winning_trades} ({win_rate:.1f}%)
   ‚Ä¢ Losing: {losing_trades} ({100-win_rate:.1f}%)

üí∞ ‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£:
   ‚Ä¢ Initial Balance: ${self.initial_balance:,.2f}
   ‚Ä¢ Final Balance: ${self.balance:,.2f}
   ‚Ä¢ Net P&L: ${net_profit:,.2f} ({(net_profit/self.initial_balance)*100:+.2f}%)
   ‚Ä¢ Profit Factor: {profit_factor:.2f}

üìâ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:
   ‚Ä¢ Max Drawdown: {max_drawdown:.2f}%
   ‚Ä¢ Max Consecutive Losses: {self.max_consecutive_losses}

üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•:
        """)
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå
        if win_rate >= 65:
            print("   ‚úÖ Win Rate: ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå (‚â•65%)")
        else:
            print(f"   ‚ùå Win Rate: ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå ({win_rate:.1f}% < 65%)")
            
        if profit_factor >= 1.8:
            print("   ‚úÖ Profit Factor: ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå (‚â•1.8)")
        else:
            print(f"   ‚ùå Profit Factor: ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå ({profit_factor:.2f} < 1.8)")
            
        if max_drawdown <= 12:
            print("   ‚úÖ Max Drawdown: ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå (‚â§12%)")
        else:
            print(f"   ‚ùå Max Drawdown: ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå ({max_drawdown:.2f}% > 12%)")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        if len(self.trades) > 0:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ trades ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
            first_trade_date = self.trades[0]['time']
            last_trade_date = self.trades[-1]['time']
            trading_days = (last_trade_date - first_trade_date).days + 1
            trades_per_day = total_trades / trading_days
            
            # ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠ trade
            avg_profit = net_profit / total_trades
            
            print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
            print(f"   ‚Ä¢ Trading Period: {trading_days} ‡∏ß‡∏±‡∏ô")
            print(f"   ‚Ä¢ Trades per Day: {trades_per_day:.1f}")
            print(f"   ‚Ä¢ Avg Profit per Trade: ${avg_profit:.2f}")
            print(f"   ‚Ä¢ Total Profit: ${total_profit:,.2f}")
            print(f"   ‚Ä¢ Total Loss: ${abs(total_loss):,.2f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á trades ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            monthly_trades = {}
            for trade in self.trades:
                month_key = trade['time'].strftime('%Y-%m')
                if month_key not in monthly_trades:
                    monthly_trades[month_key] = {'count': 0, 'profit': 0}
                monthly_trades[month_key]['count'] += 1
                monthly_trades[month_key]['profit'] += trade['pnl']
            
            print(f"\nüìÖ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:")
            for month, stats in sorted(monthly_trades.items()):
                print(f"   ‚Ä¢ {month}: {stats['count']} trades, ${stats['profit']:+,.2f}")
        
            print(f"\nüìã Trade ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
            for trade in self.trades[-5:]:
                result_emoji = "‚úÖ" if trade['pnl'] > 0 else "‚ùå"
                print(f"   {result_emoji} {trade['time'].strftime('%m-%d %H:%M')} {trade['action']} ${trade['entry_price']:.2f} ‚Üí ${trade['pnl']:+.2f}")

def main():
    backtest = GoldenTrendBacktest(initial_balance=10000)
    backtest.run_backtest()

if __name__ == "__main__":
    main()